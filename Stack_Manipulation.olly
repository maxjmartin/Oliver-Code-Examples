############################################################
# All instances of Oliver have a runtime stack. As a 
# progam is executed, each term is evaluated and placed
# on to the stack.
#
# The stack is a last in first out data structure. The
# last element can be removed and manipulated. 
#
# The runtime stack is unique and global to execution
# of each instance of an Oliver executable.
#
# By convention all terms that manipulate the stack,
# should begin and end with an '_' char to identify
# that the stack is being manipulated by the term.  
############################################################

# Place the following numbers on tbe stack.
'1' '2' '3' '4' '5'  

# Create a copy of the stack and print it to the console.
"Stack = " EMIT _STACK_ EMIT ENDL

# Display the top element od the stack to the console.
EMIT ENDL

# The stack is now defined as...
"Stack = " EMIT _STACK_ EMIT ENDL

# Terms can be used to manipulate the elements of the stack.
ADD
"Stack = " EMIT _STACK_ EMIT ENDL

# The stack can also be cleared of all elements.
clear _STACK_
"Stack = " EMIT _STACK_ EMIT ENDL


############################################################
# There are also some terms that can be used to alter or
# manipulate the stack itself.
############################################################

# lets define a new stack of elements.
"a" "b" "c" "d" "e" "f" "g"
"Stack = " EMIT _STACK_ EMIT ENDL

# Add a copy of the first element to top of the stack.
_1ST_
"Stack = " EMIT _STACK_ EMIT ENDL

# Drop the last element from the stack.
_DROP_
"Stack = " EMIT _STACK_ EMIT ENDL

# Swap the last two elements of the stack.
_SWAP_
"Stack = " EMIT _STACK_ EMIT ENDL

# Add a copy of the second element from the top of the stack.
_2ND_
"Stack = " EMIT _STACK_ EMIT ENDL

# Add a copy of the third element from the top of the stack.
_3RD_
"Stack = " EMIT _STACK_ EMIT ENDL

# Rotate the order of the stack's elements.
'4' _ROT_
"Stack = " EMIT _STACK_ EMIT ENDL
'-2' _ROT_
"Stack = " EMIT _STACK_ EMIT ENDL